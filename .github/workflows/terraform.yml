name: Terraform CD

on:
  push: 
    branches: [ "main" ]
    paths:
      - 'main-infra/**'
  pull_request:
    paths:
      - 'main-infra/**'
  
permissions:
  contents: read

jobs: 
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
  #  environment: production

    defaults:
      run:
        shell: bash
        
    steps:
    # Checkout: Access to my code, which can actually work with it.
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS Credentials: It's for communication with AWS using the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # Setup Terraform CLI: Use the specified version of Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    # Debug Environment: Verify if the AWS credentials and other environment variables are correctly set
    - name: Debug Environment
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "AWS_ACCESS_KEY_ID is set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        terraform version
        aws --version
      working-directory: ./main-infra  # run the tf files from directory main-infra

    # Terraform Init: Sync with the S3 where the terraform.tfstate is stored
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=shlomo-project-ci-cd" \
          -backend-config="key=first-project-ci-cd/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -input=false -no-color
      working-directory: ./main-infra  # run the tf files from directory main-infra

    # Terraform Validate: Validate the Terraform configuration files of the tf 
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./main-infra  # run the tf files from directory main-infra
      
    # Terraform Plan: Generate and show an execution plan
    - name: Terraform Plan
      run: terraform plan -input=false -no-color
      working-directory: ./main-infra  # run the tf files from directory main-infra

    # Terraform Apply: Apply the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      # It's will be trigger when i push/merge to main branch
      
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -no-color
      working-directory: ./main-infra  # run the tf files from directory main-infra

    - name: Install Helm Chart argo-cd
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        USER_ARGOCD: ${{ secrets.USER_ARGOCD }}
        ARGO_TOKEN: ${{ secrets.ARGO_TOKEN }}
      run: |
        aws eks update-kubeconfig --name my-cluster --region us-east-1
        # helm repo add argo https://argoproj.github.io/argo-helm
        # helm repo update
        # helm install my-argo-cd argo/argo-cd --namespace argo-cd --create-namespace --version 7.6.12
        # kubectl apply -f secret-argo.yml
        envsubst < secret-argo.yml | kubectl apply -f -
      working-directory: app-of-apps/ # run the helm files from directory helm

      # Terraform Output: Show the outputs of the Terraform
    - name: Terraform Output
      run: terraform output -no-color
      working-directory: ./main-infra  # run the tf files from directory main-infra
